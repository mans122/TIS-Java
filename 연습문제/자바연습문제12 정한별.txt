1.전체목록을 출력하는 코드를 함수로 만들기.
	public static void list(){
		try{
			System.out.println("연결되었습니다.....");
			
			// Select문 실행
			ResultSet rs=Haksa.stmt.executeQuery("select * from student");

			//JTable 초기화
			Haksa.model.setNumRows(0);
			while(rs.next()){
				String[] row=new String[4];
				row[0]=rs.getString("id");
				row[1]=rs.getString("name");
				row[2]=rs.getString("dept");
				row[3]=rs.getString("address");
				Haksa.model.addRow(row);
			}
			rs.close();
		}
		catch(Exception e1){
			System.out.println(e1.getMessage());
		}
	}

=> 등록, 목록 버튼 클릭시 showList()호출
==========================================================================
등록 버튼 클릭시
case "등록":
			for(int i=0;i<3;i++) {//tf_num값 비어있는게 있는지 확인
				if(Haksa.tf_num[i].getText().length()==0 || Haksa.tf_num[i].getText().equals("")) {
					value = 1;//비었으면 value값을 1로 설정
				}
			}

			if (value != 1){ // id,name,dept 값이 비어있지 않을 경우
				if(id.length()==7 && isNumber == true ) { // id의 값이 길이가 7이고,Int형일 경우
					try {
						Haksa.stmt.executeQuery("insert into student values('"+id+"','"+name+"','"+dept+"','"+address+"')");
						JOptionPane.showMessageDialog(null,"등록되었습니다.","알림",JOptionPane.INFORMATION_MESSAGE);
						ResultSet ws=Haksa.stmt.executeQuery("select * from student");
						list();
						//등록이 완료된 텍스트필드를 비워주기위한 코드
						for(int i=0;i<4;i++) {
							Haksa.tf_num[i].setText("");
						}
					}
					//SQL에서 에러가 발생하면 알림창 생성
					catch(SQLException sqlE) {
						JOptionPane.showMessageDialog(null,"이미 존재하는 학번입니다.","경고",JOptionPane.WARNING_MESSAGE);
					}
					catch(Exception inputE) {
						inputE.printStackTrace();
					}
					//권장되는 코드
					finally {
						try{
							if(Haksa.stmt!=null) {Haksa.stmt.close();}
							if(Haksa.rs!=null) {	Haksa.rs.close();}
						}catch(Exception ee) {
							ee.printStackTrace();
						}
					}
				}
				//id가 길이가 7자,정수형이 아닐때 정수형이 아니면 출력
				else if(isNumber == false) {
					JOptionPane.showMessageDialog(null,"ID는 숫자만 입력해주세요","경고",JOptionPane.WARNING_MESSAGE);
				}
				//id가 정수형이지만, 7자리가 아닐경우
				else {
					JOptionPane.showMessageDialog(null,"ID는 7자리로 입력해주세요","경고",JOptionPane.WARNING_MESSAGE);
				}
			}
			else {//비었으면 메시지 출력
				JOptionPane.showMessageDialog(null,"값이 입력되지 않았습니다.","경고",JOptionPane.WARNING_MESSAGE);
			}
			break;


2. 삭제시 '삭제하시겠습니까? confirm dialog띄워서 '예'를
누르면 삭제처리.
case "삭제":
			if(JOptionPane.showConfirmDialog(null, "정말삭제하시겠습니까?", "삭제", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
				if(id.length()!=0) {
					try {
						Haksa.stmt.executeQuery("delete from student where id = '"+id+"'");
						list();
						for(int i=0;i<4;i++) {
							Haksa.tf_num[i].setText("");
						}
					}
					catch(Exception deleteE) {
						deleteE.printStackTrace();
					}
				}
				else {
					JOptionPane.showMessageDialog(null,"삭제할 학번을 입력해주세요","경고",JOptionPane.WARNING_MESSAGE);
				}
			}
			break;

3. 주소 처리 완성하기

list 메서드에  추가
	row[3]=rs.getString("address");

Haksa 클래스에
String colName[]={"학번","이름","학과","주소"}; // 표에 출력할 칼럼명

마우스리스너에
String address = (String)model.getValueAt(table.getSelectedRow(), 3);
tf_num[3].setText(address);

추가